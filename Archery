
#include<stdio.h>
#include<GL/glut.h>
#include<string.h>
#include<stdlib.h>

int timer=60;
int xr=0,yr=0;int r=0,m=0,n=0,o=0,p=0,q=0,s=0,t=0,u=0,l=0,h=0,b=0;//to control the object movements...
int qq=0,yy=0,cc,f1[10];
int x=25,y=50,count=0,i=0;
int count1=0,count2=0,count3=0,count4=0,count5=0,count6=0,count7=0,count8=0,count9=0,no_of_arrows=0;
char str [10],str1[10],str2[10];

void draw_target();
void arrow();

/*to display bitmap char*/
void bitmap_output(int x,int y,char *string,void *font)
{
    int len,i;
    glRasterPos2f(x,y);
    len=(int)strlen(string);
    for(i=0;i<len;i++)
    {
        glutBitmapCharacter(font,string[i]);
    }
return;
}

void id()
{
    if(yr>=143 )//|| yr==156 || yr==159 || yr==162 || yr ==165 || yr==168)
    {
        if(qq>=120 && count1!=1)
        {
            r+=400;
            count1=1;
            count++;xr=180;
        }
        else
            cc=0;
    }
    else if(yr>=116 && yr <= 135)
    {
        if(qq>=90 && count2!=1)
        {m+=400;count2=1;count++;}
    }
    else if(yr>=87 && yr <= 90)
    {
        if(qq>=70 && count4!=1)
        {o+=400;count4=1;count++;}
    }
    else if(yr>=105 && yr <= 114)
    {
        if(qq>=150 && count3!=1)
        {n+=400;count3=1;count++;}
    }
    else if(yr>=60 && yr <= 66)
    {
        if(qq>=130 && count5!=1)
        {p+=400;count5=1;count++;}
    }
    else if(yr>=45 && yr <= 51)
    {
        if(qq>=110 && count6!=1)
        {q+=500;count6=1;count++;}
    }
    else
        cc=0;

glutIdleFunc(id);
glutPostRedisplay();
}

/*to clear screen & set projection mode*/
void init()
{
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
    glClearColor(0,0,0,1);

    glutDisplayFunc(draw_target);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    glOrtho(0,500,0,500,0,500);

    glMatrixMode(GL_MODELVIEW);
    glEnable(GL_DEPTH_TEST);
}
void arrow()
{
    glColor3f(1,1,0);
    glColor3f(0.0,1.0,1.0);

    glBegin(GL_QUADS);
        glVertex2d(x+xr,y-3+yr);
        glVertex2d(x+xr,y+3+yr);
        glVertex2d(x+100+xr,y+3+yr);
        glVertex2d(x+100+xr,y-3+yr);
    glEnd();

    glColor3f(0,0,1);
    glBegin(GL_TRIANGLES);
        glVertex2d(x+100+xr,y+6+yr);
        glVertex2d(x+113+xr,y+yr);
        glVertex2d(x+100+xr,y-6+yr);
    glEnd();

    glColor3f(1.0,0.0,0.0);
    glBegin(GL_QUADS);
        glVertex2d(x+xr,y+3+yr);
        glVertex2d(x+xr,y-3+yr);
        glVertex2d(x-10+xr,y-7+yr);
        glVertex2d(x-10+xr,y+7+yr);
    glEnd();

glFlush();
glutPostRedisplay();
glutSwapBuffers();
}
void parrot()
{
    glColor3f(1,0,1);
    glPointSize(30);

    glBegin(GL_TRIANGLES);
        glVertex2d(289,450);
        glVertex2d(292,448);
        glVertex2d(292,452);
    glEnd();

    glColor3f(0,1,0);
    glBegin(GL_QUADS);
        glVertex2d(293,447);
        glVertex2d(293,453);
        glVertex2d(295,453);
        glVertex2d(295,447);
    glEnd();

    glBegin(GL_TRIANGLES);
        glVertex2d(295,450);
        glVertex2d(299,455);
        glVertex2d(299,445);
    glEnd();

    glBegin(GL_TRIANGLES);
        glVertex2d(299,455);
        glVertex2d(299,445);
        glVertex2d(313,450);
    glEnd();

    glBegin(GL_TRIANGLES);
        glVertex2d(299,453);
        glVertex2d(302,450);
        glVertex2d(310,459);
    glEnd();

    glBegin(GL_LINES);
        glVertex2d(301,453);
        glVertex2d(310,440);
        glVertex2d(302,453);
        glVertex2d(311,442);
        glVertex2d(303,452);
        glVertex2d(309,446);
    glEnd();

    glColor3f(0,1,1);
    glBegin(GL_LINE_LOOP);
        glVertex2d(285,465);
        glVertex2d(315,465);
        glVertex2d(315,435);
        glVertex2d(285,435);
    glEnd();

}
/*to draw the target inside line loop*/
void draw_target()
{
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glClearColor(0.0,0.0,0.0,0.0);
    glColor3f(1,1,0);
glColor3f(0.9,0.0,0.3);
    bitmap_output(209,459,"ARCHERY-GAME",GLUT_BITMAP_TIMES_ROMAN_24);
    bitmap_output(207,450,"---------------",GLUT_BITMAP_TIMES_ROMAN_24);
    glColor3f(1,1,1);
    bitmap_output(0,443,"------------------------------------------------------------------------------------------------------",GLUT_BITMAP_TIMES_ROMAN_24);
    bitmap_output(0,22,"------------------------------------------------------------------------------------------------------",GLUT_BITMAP_TIMES_ROMAN_24);

    glColor3f(1,1,0);
    sprintf(str,"SCORE : %d",count);
    bitmap_output(10,459,str,GLUT_BITMAP_HELVETICA_18);
    sprintf(str1,"NO_OF_ARROWS : %d",no_of_arrows);
    bitmap_output(400,59,str1,GLUT_BITMAP_HELVETICA_18);
    if(no_of_arrows==11)
    {
        glColor3f(1,0,0);

         bitmap_output(148,270,"SORRY GAME OVER",GLUT_BITMAP_TIMES_ROMAN_24);
        bitmap_output(180,230,"YOU REACHED YOUR ARROWS LIMIT",GLUT_BITMAP_TIMES_ROMAN_24);
 glColor3f(0.7,0,0.6);
        int mx,my=0,i;
        for(i=0;i<40;i++){
        int mx=(rand()%500)+30;
        int my=(rand()%500)+30;
        glPointSize(10);
        glBegin(GL_POINTS);
        glVertex2f(mx,my);
        }
        glEnd();

        glFlush();

    }
    if(count==9)
    {
        glColor3f(0.6,0.3,1);
        bitmap_output(148,270,"CONGRADULATIONS",GLUT_BITMAP_TIMES_ROMAN_24);
        bitmap_output(180,230,"YOU WON THE GAME",GLUT_BITMAP_TIMES_ROMAN_24);
glColor3f(1,1,1);
        int mx,my=0,i;
        for(i=0;i<40;i++){
        int mx=(rand()%500)+30;
        int my=(rand()%500)+30;
        glPointSize(10);
        glBegin(GL_POINTS);
        glVertex2f(mx,my);
        }
        glEnd();


        glColor3f(0.7,0.1,0.9);
        //int mx,my=0,i;
        for(i=0;i<40;i++){
        int mx=(rand()%500)+30;
        int my=(rand()%500)+30;
        glPointSize(10);
        glBegin(GL_POINTS);
        glVertex2f(mx,my);
        }
        glEnd();

        glColor3f(1,0.0,0.1);
        //int mx,my=0,i;
        for(i=0;i<40;i++){
        int mx=(rand()%500)+30;
        int my=(rand()%500)+30;
        glPointSize(10);
        glBegin(GL_POINTS);
        glVertex2f(mx,my);
        }
        glEnd();
        glFlush();
    }

    //1st object
    if(count1==0){
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(230,140+r,0);
        parrot();
    glPopMatrix();}
    //---------------------------------------
    if(count2==0){
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(165,65+m,0);
        parrot();
    glPopMatrix();}
    //---------------------------------------
    if(count3==0){
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(295,15+n,0);
        parrot();
    glPopMatrix();}
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(95,-40+o,0);
        parrot();
    glPopMatrix();
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(265,-110+p,0);
        parrot();
    glPopMatrix();
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(190,-160+q,0);
        parrot();
    glPopMatrix();
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(105,-210+l,0);
        parrot();
    glPopMatrix();
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(270,-260+h,0);
        parrot();
    glPopMatrix();
    //---------------------------------------
    glPushMatrix();
        glScalef(0.7,0.7,1);
        glTranslated(188,-300+b,0);
        parrot();
    glPopMatrix();


    //Arrow
    glPushMatrix();
        glTranslated(-10+xr,60+yr,0);
        arrow();
    glPopMatrix();
    //arrow();
     if(yr>=143 )//|| yr==156 || yr==159 || yr==162 || yr ==165 || yr==168)
    {
        if(qq>=120 && count1!=1)
        {
            r+=400;
            count1=1;
            count++;xr+=100;xr=0;no_of_arrows+=1;
        }
        else
            cc=0;
    }
    else if(yr>=116 && yr <= 135)
    {
        if(qq>=90 && count2!=1)
        {m+=400;count2=1;count++;xr+=200;xr=0;no_of_arrows+=1;}
    }
    else if(yr>=87 && yr <= 90)
    {
        if(qq>=70 && count4!=1)
        {o+=400;count4=1;count++;xr+=300;xr=0;no_of_arrows+=1;}
    }
    else if(yr>=105 && yr <= 114)
    {
        if(qq>=150 && count3!=1)
        {n+=400;count3=1;count++;xr+=300;xr=0;no_of_arrows+=1;}
    }
    else if(yr>=60 && yr <= 66)
    {
        if(qq>=130 && count5!=1)
        {p+=400;count5=1;count++;xr+=300;xr=0;no_of_arrows+=1;}
    }
    else if(yr>=45 && yr <= 51)
    {
        if(qq>=110 && count6!=1)
        {q+=500;count6=1;count++;xr+=300;xr=0;no_of_arrows+=1;}
    }
    else if(yr>=24 && yr<=33)
    {
        if(qq>=80 && count7!=1)
        {
            l+=500;count7=1;count++;xr+=300;xr=0;no_of_arrows+=1;
        }
    }
     else if(yr>=6 && yr<=15)
    {
        if(qq>=130 && count8!=1)
        {
            h+=600;count8=1;count++;xr+=100;xr=0;no_of_arrows+=1;
        }
    }
     else if(yr>=-9 && yr<=0)
    {
        if(qq>=110 && count9!=1)
        {
            b+=600;count9=1;count++;xr+=100;xr=0;no_of_arrows+=1;
        }
    }
    else
        cc=0;

glutPostRedisplay();
glutSwapBuffers();

glFlush();
}

/*sub menu to display instructions*/
void demo_menu(int i)
{
    switch(i)
    {
        case 5:
        case 6:
        case 7:
        case 8:break;
    }
}
/*sub menu to display designer names*/
void demo(int i)
{
    switch(i)
    {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:break;
    }
}
void game(int id)
{
    switch(id)
    {
        case 2:exit(0);
    }
}


void specialkeys(int key,int x,int y)
{
 switch(key)
 {
     case GLUT_KEY_UP:
                        if(yr==168)
                        yr=yr-3;
                        else{yr=yr+3;yy=yr;}
                        printf("Up= %d ",yr);
                        glutPostRedisplay();
                        break;
     case GLUT_KEY_DOWN:
                        if(yr==-27)
                        yr=yr+3;
                        else
                        yr=yr-3;
                        glutPostRedisplay();
                        break;
     case GLUT_KEY_LEFT:
                        if(xr==-3)
                        xr=xr+3;
                        else
                        xr=xr-3;
                        glutPostRedisplay();
                        break;
     case GLUT_KEY_RIGHT:

                        if(xr>=180)
                        {xr=0;
                        if(i==12)exit(0);
                        //i+=1;
                         no_of_arrows+=1;
                        }
                        else
                        {
                           xr=xr+10;
                           qq=xr;
                           printf("%d",xr);
                        }
                        printf(" %d ",xr);
                        glutPostRedisplay();
                        break;
  }
}


int main(int argc,char **argv)
{
    int sub_menu,submenu;

    glutInit(&argc,argv);
    glutInitWindowSize(1200,700);

    glutCreateWindow("ARCHERY GAME BLOCK SHOOTING");

    sub_menu=glutCreateMenu(demo_menu);
    glutAddMenuEntry("Shoot Target",5);
    glutAddMenuEntry("9 Parrots are present",6);
    glutAddMenuEntry("Use Up and Down Arrows to move arrow",7);
    glutAddMenuEntry("otherwise win",8);

    submenu=glutCreateMenu(demo);
    glutAddMenuEntry("Archery game is a precision sport where the competitors aim",9);
    glutAddMenuEntry("and shoot at the target using the arrow.",10);
    glutAddMenuEntry("Done By Dileep",11);
    glutAddMenuEntry("        Manoj H G",12);
    glutAddMenuEntry("        Aruna Kumari",13);

    glutCreateMenu(game);
    glutAddSubMenu("INSTRUCTION",sub_menu);
    glutAddSubMenu("ABOUT",submenu);
    glutAddMenuEntry("QUIT",2);

    glutAttachMenu(GLUT_RIGHT_BUTTON);

    init();

    glutSpecialFunc(specialkeys);

    glutMainLoop();
return 0;
}


